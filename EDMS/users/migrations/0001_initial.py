# Generated by Django 4.2.11 on 2024-07-16 14:42

import django.db.models.deletion
import django.utils.timezone
import users.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("companies", "0002_alter_address_city_alter_address_country_and_more"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "first_name",
                    models.CharField(help_text="User's first name.", max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(help_text="User's last name.", max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="User's email.", max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(help_text="User's phone number, e.g. 48123123123.", max_length=50, null=True),
                ),
                ("position", models.CharField(help_text="User's position, e.g. accountant", max_length=30, null=True)),
                (
                    "vacation_days_per_year",
                    models.PositiveSmallIntegerField(
                        default=26, help_text="Number of vacation days which owed to the user per year."
                    ),
                ),
                (
                    "vacation_left",
                    models.SmallIntegerField(default=0, help_text="Number of vacation days which left for the user."),
                ),
                (
                    "photo",
                    models.ImageField(
                        default="photos/undraw_profile.svg", help_text="User's face.", upload_to="photos"
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        blank=True,
                        help_text="Place of residence of the user.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="companies.address",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[
                ("objects", users.models.CustomUserManager()),
            ],
        ),
    ]
